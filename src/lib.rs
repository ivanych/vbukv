//! Библиотека и консольное приложение для поиска слов в словаре по буквам
/*!
# SYNOPSIS

Файл приложения **main.rs**:
```
use vbukv::input;
use vbukv::libvbukv;

// Получить параметры поиска из аргументов командной строки
// (на самом деле приложение использует не `parse_from`, а `parse`,
// но для примера удобнее использовать `parse_from`).
let args = input::args::parse_from(["vbukv", "-f", "test_slovar.txt", "с+", "о+3"]);

// Найти слова, подходящие под заданные параметры
let assumptions = libvbukv::assumptions(&args.file, args.length, &args.rules);

// Проверка: это слово должно быть среди найденных
let word = "стопа".to_string();
assert!(assumptions.contains(&word));
```

# DESCRIPTION

Пакет [vbukv](http://github.com/ivanych/vbukv) содержит библиотеку
для поиска слов в словаре по буквам.
Также в пакете есть готовое консольное приложение,
сделанное с использованием этой библиотеки.

Для поиска слов в словаре могут быть заданы следующие параметры:
* **file** — словарь (путь к файлу словаря)
* **length** — длина искомых слов (число)
* **rules** — список правил, по поторым нужно искать слова в словаре (строки)

Консольное приложение **vbukv** получает эти параметры из аргументов
командной строки с помощью модуля `input`. При непосредственном использовании
библиотеки `vbukv` эти параметры могут быть взяты где угодно,
на усмотрение программиста.

Результаты работы консольного приложения выводятся в терминал:

```
use vbukv::output;

// Найти слова, подходящие под заданные параметры
// let assumptions = libvbukv::assumptions...
# let assumptions = vec![
#    String::from("раз"),
#    String::from("два"),
#    String::from("три"),
# ];

// Вывести найденные слова
output::term::output(&assumptions).expect("Failed to print output");
```

Библиотека не занимается выводом, релизация вывода остаётся решением
программиста.
*/

#![warn(missing_docs)]

pub mod input;
pub mod libvbukv;
pub mod output;
